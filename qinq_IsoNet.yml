# Ansible Playbook to create a VM and configure SDN in Proxmox with QinQ zones

- name: Create a VM and configure SDN in Proxmox
  hosts: localhost
  gather_facts: false

  # Load variables from vars.yml
  vars_files:
    - vars.yml

  tasks:
    # Task 1: Get the next available VM ID using an external Python script
    - name: Get the next available VM ID
      command: "python3 {{ playbook_dir }}/fetch_next_vmid.py"
      register: next_vm_id_output

    # Task 2: Set the VM ID as a fact (variable) based on the output from the previous task
    - name: Set VM ID variable
      set_fact:
        vm_id: "{{ next_vm_id_output.stdout | trim }}"

    # Task 3: Define the VNet name and service VLAN based on the VM ID
    - name: Define VNet name and service VLAN
      set_fact:
        vnet_name: "vnet{{ vm_id }}"            # VNet name based on VM ID
        service_vlan: "{{ vm_id | int + 1 }}"   # Service VLAN derived from VM ID

    # Task 4: Create an SDN zone of type 'qinq' in Proxmox
    - name: Create SDN Zone (QinQ)
      proxmox_sdn_zone:
        state: present
        zone: "{{ sdn_zone_params.zone }}"
        type: "{{ sdn_zone_params.type }}"
        mtu: "{{ sdn_zone_params.mtu }}"
        bridge: "{{ sdn_zone_params.bridge }}"
        tag: "{{ sdn_zone_params.tag }}"
        vlan_protocol: "{{ sdn_zone_params.vlan_protocol }}"
        api_user: "{{ api_user }}"
        api_password: "{{ api_password }}"
        api_host: "{{ api_host }}"
        api_port: "{{ api_port }}"
        validate_certs: false
      delegate_to: localhost

    # Task 5: Display a message confirming successful SDN zone creation
    - name: Display SDN Zone creation response
      debug:
        msg: "SDN Zone '{{ sdn_zone_params.zone }}' created successfully."

    # Task 6: Create a VNet within the newly created QinQ SDN zone
    - name: Create SDN VNet
      proxmox_sdn_vnet:
        state: present
        vnet: "{{ vnet_name }}"
        zone: "{{ sdn_zone_params.zone }}"
        tag: "{{ service_vlan }}"
        api_user: "{{ api_user }}"
        api_password: "{{ api_password }}"
        api_host: "{{ api_host }}"
        api_port: "{{ api_port }}"
        validate_certs: false
      delegate_to: localhost

    # Task 7: Display a message confirming successful VNet creation
    - name: Display VNet creation response
      debug:
        msg: "SDN VNet '{{ vnet_name }}' created successfully."

    # Task 8: Apply any pending SDN changes using an external Python script
    - name: Apply SDN changes using Python script
      command: "python3 {{ playbook_dir }}/apply_sdn_changes.py"
      delegate_to: localhost

    # Task 9: Display a message confirming successful application of SDN changes
    - name: Display SDN apply response
      debug:
        msg: "Pending SDN changes applied successfully using Python script."

    # Task 10: Import tasks from vm_outline.yml
    - name: Import VM creation tasks
      import_tasks: vm_outline.yml